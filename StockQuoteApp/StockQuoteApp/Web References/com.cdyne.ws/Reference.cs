// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace StockQuoteApp.com.cdyne.ws {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using System.Data;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.0.1.24")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DelayedStockQuoteSoap", Namespace="http://ws.cdyne.com/")]
    public partial class DelayedStockQuote : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetQuoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuickQuoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuoteDataSetOperationCompleted;
        
        /// CodeRemarks
        public DelayedStockQuote() {
            this.Url = "http://ws.cdyne.com/delayedstockquote/delayedstockquote.asmx";
        }
        
        public DelayedStockQuote(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event GetQuoteCompletedEventHandler GetQuoteCompleted;
        
        /// CodeRemarks
        public event GetQuickQuoteCompletedEventHandler GetQuickQuoteCompleted;
        
        /// CodeRemarks
        public event GetQuoteDataSetCompletedEventHandler GetQuoteDataSetCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/GetQuote", RequestNamespace="http://ws.cdyne.com/", ResponseNamespace="http://ws.cdyne.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public QuoteData GetQuote(string StockSymbol, string LicenseKey) {
            object[] results = this.Invoke("GetQuote", new object[] {
                        StockSymbol,
                        LicenseKey});
            return ((QuoteData)(results[0]));
        }
        
        /// CodeRemarks
        public void GetQuoteAsync(string StockSymbol, string LicenseKey) {
            this.GetQuoteAsync(StockSymbol, LicenseKey, null);
        }
        
        /// CodeRemarks
        public void GetQuoteAsync(string StockSymbol, string LicenseKey, object userState) {
            if ((this.GetQuoteOperationCompleted == null)) {
                this.GetQuoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuoteOperationCompleted);
            }
            this.InvokeAsync("GetQuote", new object[] {
                        StockSymbol,
                        LicenseKey}, this.GetQuoteOperationCompleted, userState);
        }
        
        private void OnGetQuoteOperationCompleted(object arg) {
            if ((this.GetQuoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuoteCompleted(this, new GetQuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/GetQuickQuote", RequestNamespace="http://ws.cdyne.com/", ResponseNamespace="http://ws.cdyne.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public decimal GetQuickQuote(string StockSymbol, string LicenseKey) {
            object[] results = this.Invoke("GetQuickQuote", new object[] {
                        StockSymbol,
                        LicenseKey});
            return ((decimal)(results[0]));
        }
        
        /// CodeRemarks
        public void GetQuickQuoteAsync(string StockSymbol, string LicenseKey) {
            this.GetQuickQuoteAsync(StockSymbol, LicenseKey, null);
        }
        
        /// CodeRemarks
        public void GetQuickQuoteAsync(string StockSymbol, string LicenseKey, object userState) {
            if ((this.GetQuickQuoteOperationCompleted == null)) {
                this.GetQuickQuoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuickQuoteOperationCompleted);
            }
            this.InvokeAsync("GetQuickQuote", new object[] {
                        StockSymbol,
                        LicenseKey}, this.GetQuickQuoteOperationCompleted, userState);
        }
        
        private void OnGetQuickQuoteOperationCompleted(object arg) {
            if ((this.GetQuickQuoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuickQuoteCompleted(this, new GetQuickQuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.cdyne.com/GetQuoteDataSet", RequestNamespace="http://ws.cdyne.com/", ResponseNamespace="http://ws.cdyne.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetQuoteDataSet(string StockSymbols, string LicenseKey) {
            object[] results = this.Invoke("GetQuoteDataSet", new object[] {
                        StockSymbols,
                        LicenseKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// CodeRemarks
        public void GetQuoteDataSetAsync(string StockSymbols, string LicenseKey) {
            this.GetQuoteDataSetAsync(StockSymbols, LicenseKey, null);
        }
        
        /// CodeRemarks
        public void GetQuoteDataSetAsync(string StockSymbols, string LicenseKey, object userState) {
            if ((this.GetQuoteDataSetOperationCompleted == null)) {
                this.GetQuoteDataSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuoteDataSetOperationCompleted);
            }
            this.InvokeAsync("GetQuoteDataSet", new object[] {
                        StockSymbols,
                        LicenseKey}, this.GetQuoteDataSetOperationCompleted, userState);
        }
        
        private void OnGetQuoteDataSetOperationCompleted(object arg) {
            if ((this.GetQuoteDataSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuoteDataSetCompleted(this, new GetQuoteDataSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.0.1.24")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.cdyne.com/")]
    public partial class QuoteData {
        
        /// <remarks/>
        public string StockSymbol;
        
        /// <remarks/>
        public decimal LastTradeAmount;
        
        /// <remarks/>
        public System.DateTime LastTradeDateTime;
        
        /// <remarks/>
        public decimal StockChange;
        
        /// <remarks/>
        public decimal OpenAmount;
        
        /// <remarks/>
        public decimal DayHigh;
        
        /// <remarks/>
        public decimal DayLow;
        
        /// <remarks/>
        public int StockVolume;
        
        /// <remarks/>
        public decimal PrevCls;
        
        /// <remarks/>
        public string ChangePercent;
        
        /// <remarks/>
        public string FiftyTwoWeekRange;
        
        /// <remarks/>
        public decimal EarnPerShare;
        
        /// <remarks/>
        public decimal PE;
        
        /// <remarks/>
        public string CompanyName;
        
        /// <remarks/>
        public bool QuoteError;
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.0.1.24")]
    public delegate void GetQuoteCompletedEventHandler(object sender, GetQuoteCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.0.1.24")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public QuoteData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QuoteData)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.0.1.24")]
    public delegate void GetQuickQuoteCompletedEventHandler(object sender, GetQuickQuoteCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.0.1.24")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuickQuoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuickQuoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.0.1.24")]
    public delegate void GetQuoteDataSetCompletedEventHandler(object sender, GetQuoteDataSetCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "7.0.1.24")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuoteDataSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuoteDataSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}
